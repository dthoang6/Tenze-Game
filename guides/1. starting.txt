1. Starting to build our complex app: 6h
- Begin
- Current Year
- What is a Router
- What is a Controller
- What is a Model - MVC Pattern
- Adding validation to our Model
- Quick Misc clean up
- Connecting to database in a reusable fashion
- Best practice timeout: environment variables

- Letting users log in
- what is a promise
- Running multiple promise
- hashing user passwords
- how can we identify or trust a request:
- Understanding sessions

- let users log out
- adding flash messages
- user registration improvement
- adding user profile photos
-------------------
- 1. Begin:
-------------------
. install package.json for keep track app recipe: npm init -y.
. let vs const
. set up express server
. html template: breaking this file to separated file with their own responsibility into views folder.
    . views/home-guest.ejs

. main.css file: public/main.css
. how to make our app js file even more organized.
    . As your application grows in complexity, a lot of routes to be listening for. How to set up a router?
----------------------------
- 2. Current Year: <%= new Date().getFullYear() %>
- 3.1 What is a Router
    . A router has the responsibility of listing out the urls or routes that you want to listen and then say what should happen for each of those routes.
    . Build a router for our app: it is the router job to list out all of the urls or routes that we are on the lookout for.
- 3.2 How to let one js file communicate with another or let one js file share it code with another.
    . we can use require with packages name that we did not create.
    . we can also use require to pull in js files with the file path that we create.
    . The require function in node does 2 things: executes said file, and returns whatever that file exports.
-----------------------------
- 4. What is a Controller
    . The controller will allow our router file to stay cleaner itself by keeping the function in a separated file.

-----------------------------

- 5. What is a MVC pattern?
  . MVC pattern: Model View Controller pattern to keep your code organized into these distinct components to avoid messy code that becomes unmanageable.

  .MODEL: where we would include all of our business logic or all of the rules that we want to enforce or model on our data.
      .a user's name must be unique
      .password must be at least twelve characters long.
      .Essentially the model is where we model our data.

  .VIEW is self explanatory in the context of a Web app. The view is our HTML template that the user will see in their web browser or views file folder.

  .CONTROLLER: It's the responsibility of the controller to accept input. In this case, the input is network requests to our different routes and then the controller needs to convert that input into appropriate commands for our models and views.
  .We could say the controller is the middleman.
  .Depending on the incoming request, the controller will call the appropriate business logic and rules that we want to enforce on the data.
  .Then once that's done, the controller will call the appropriate view and pass it any relevant dynamic data from the model.
-----------------------------
What is a Model?
  .Before we go ahead and create a user model file that says what a user should be.
  .First, make sure our userController can access this form data when gets submitted. tell express to accept 2 common ways of submitting data, test it using console.log(req.body)

  .From a programming or JS perspective, what would a model be?
  .we want to create a reusable blueprint for an object by constructor function.
  .We can set up a constructor function that spells out all of the properties and methods that a user object should have.
  .We can keep that constructor function in separate file.
  .We can simply to require that model file and use it as a blueprint to create a new user object specific to the current request and user submitted data.

  .All of the logic that checks the incoming data for validation errors and all of the code that makes up the blueprint of what a user should be that will live in a separate user model file.
  - How to use js to create a new object using the user object?
-----------------------------
- 6. Adding validation to our Models/User.js

 //step 1: we would first want to validate user name, email, password value. we want to enforce all of our business login.

//Step 2: only if there are no validation errors, then save a user data into a database.

-----------------------------

- 7. Quick Misc clean up 01/23/2023 models/User.js
.Setting safety checks up:
-we want to make sure that the user does not try to send a value that is not a string of text for username, email, password.
-do not accept array or object
-do not accept any extra properties or fields that visitor try to send over.
-----------------------------

- 8.Connecting to database in a reusable fashion: db.js

.our goal is to connect our app to this new database Complex App, so that when someone submits the user registration form with valid values, we would expect to see a new user document appear with users collection.

.instead of connect to the database once in a separate file in each of our model file, we create a file and leverage it in each model file using module.export and require.
-----------------------------

- 9. Best practice timeout: environment variables

.basic security with connection string, do not hard code
.create connection string with .env file and dotenv package
.pull in environment variable with package dotenv

const dotenv = require("dotenv");
dotenv.config(); //the package will load in all of the values that we defined within our .env file.

.keep any secret API keys that you're using to connect to third party apps.

.Why: security: password would not leaked and it is easy to for your application to change and adjust depending on the current environment by only changing individual environment variable instead of change your code.. 

-----------------------------

- 10. Letting users log in: 01/24/2023

.let user submit login form.
.determine if the username and password that they typed in is correct.
-home-guest.ejs: add new route: action="/login"
-router.js: router.post("/login", userController.login);
-userController.js
-User.js
-----------------------------

- 11. what is a promise? 01/25/23

.promise is a modern practice to replace the callback practice to perform asynchronous operations or operation that are going to take sometime to complete. And then call resolve or reject.
.User.prototype.login = function() {
  return new Promise ((resolve, reject) => {
    //asynchronous operations: CRUD
  })
}
.how to leverage the return promise object when calling login method.

let user = new User(req.body)
user.login().then().catch()

.If the promise was successful saying what you want to do within the then parentheses and saying what you want to do within the catch parentheses if the promise failed.

.Why are promises so great? benefits of using promise

  -simulate the nature of asynchronous actions
  -when we do something like talk to a database or send out a request to another server, we don't know how long those actions are going to take.

  -asynchronous function like setTimeOut(function, 800) is going to take time to complete.

  -how we coordinate these four events so that each one waits until the previous one has actually completed.

  -when we need to coordinate multiple asynchronous events?

  -method 1: callback: if we can avoid this nesting, we should because in the long run our code will be much more manageable and easy to maintain.

  eatBreakfast(function() {
    eatLunch(function() {
      eatDinner(function() {
        eatDessert()
      })
    })
  })
  -method 2.1: promise: 
    .chaining with no nesting, error handling, each action is just returning another promise and we can chain them together using then() and at the end with catch() for error handling.

    .we don't need to micromanage or babysit each of our actions listening for errors like we would with callbacks. We just need one single catch and if any of our promises reject instead of resolve, the catch will take care of it.

  function eatBreakfast() {
    return new Promise ((resolve, reject) => {
        //asynchronous operations: CRUD
    })
  }

eatBreakfast().then(function() {
  return eatLunch()
}).then(function() {
  return eatDinner()
}).then(function() {
  return eatDesert()
}).catch(function(e) {
  console.log(e)
}))

-can make above code more easier to ready by using arrow function

eatBreakfast()
.then(() => eatLunch())
.then(() => eatDinner())
.then(() => eatDesert())
.catch(function(e) {
  console.log(e)
})

method 2.2: alternative way of working with promises
- instead of using then().catch()
- we use async await, try catch for error handling

- with promises we can include the word await before them and then js will indeed let this asynchronous operational promise resolve how long that takes before moving on to the next operation.
- but you can only use await if you are within an asynchronous function.

//the code below is really clean and this is a prefer way of using or leveraging promise.

async function run() {
  try {
    await eatBreakfast()
    await eatLunch()
    await eatDinner()
    await eatDesert()
  } catch(err) {
    console.log(err)
  }
}
run()

- however, we are not going to rewrite the area where we leverage our promise in userController and User.
- going forward we are going to use async and await.

- promise is an object that represents the event completion of an asynchronous operation.

-----------------------------

12. Running multiple promise

If you have multiple promises and you want to wait until they've all completed before doing something else, but you don't care what order the promises run/complete in, you can use the following syntax:

async function() {
  await Promise.all([promise1, promise2, promise3, promise4])
  // JavaScript will wait until ALL of the promises have completed
  console.log("All promises completed. Do something interesting now.")
}
-----------------------------

13. hashing user passwords

- not storing user passwords in plain text in our database but instead hashing the user's pass so that if our database was ever compromised or leaked, we wouldn't reveal user pass to malicious user or attacker.

- when a user register for our app and they choose a pass, we can hash that pass value within our node server and then we can store that hash value in our database.
- hashing a value just means converting it into a different value.
- hashing is not the same thing as encrypting.
- when you encrypt a value, that implies it can be decrypted. encryption and decryption is a two way street.

- hashing a value is a one way job.
- package: bcryptjs
- hashing user password in register
- update login with hashing
-----------------------------
- We are going to learn what it means to truly log a user in. meaning if a user types in a valid username and password in login form.

- If the user went back to the homepage url, we would need some way to determine that the current request to this new url is logged in.
- And instead of showing them the guest registration page, we should show them a template that for log in user.

- how do we really log a user in?
- how do we set up our server to be able to trust that subsequent requests after a successful login?
-----------------------------

- 14. how can we identify or trust an incoming request: 01/26/2023

.as soon as the http request is complete, our server responds to that login request that marks the end of the life cycle of that http request.
.from that moment forward, the server has no memory of the browser and the browser has no memory of the server.

.the server has no memory that the visitor just entered the correct username and password.
.the web browser is still seeing the registration home page.

.how to set things up so the server can trust an incoming request?
.http requests are stateless, that each request is ran without any knowledge of the requests that came before it.
.how to set up so that after a user login, the server trust the subsequent request from that browser?

.there are two primary technologies that can solve this issue of identifying and trusting subsequent requests?
- 1. sessions or
- 2. tokens

.we start with sessions and when we set up a simple API for our application, we learn how to use tokens.

-enable sessions with package express-session
-leverage the express-session
-configure options to use
-setup the session req.session.user = {save the data when user login, register...}

.the whole idea of a session is that it allows us to have some sort of persistent data from one request to another, meaning our server is going to remember this session data.
.we can use this session data if someone visits the homepage 

.how the server identifying this unique web browser or visitor or request? cookies
.once a web browser has the cookie, the browser is going to send any and all cookies for the current domain back to the node server with every single request automatically.
.so the server is going to see this cookie unique identifier value so the server will trust this request.
-----------------------------

- 15. Understanding sessions

.package connect-mongo to store session into database
.configure session options to store session data to database
.adjust db.js
.update how to use db to CRUD

.all that gets stored in the cookie is the unique session identifier, but all of the actual session data lives on the server side or database side.

.in the future, we will set things up so that if you successfully register, the system automatically logs you in.

-setup home-dashboard.ejs; copy html raw code into this file
-in userController exports.home = ...

-in ejs to do something dynamic, to run a bit of js we use syntax:
<%= ... %>

-----------------------------

16. let users log out

.make the sign out button come to life
.give users the ability to sign out or destroy their current session
.html -> router -> userController -> Model

.first step, html template to where this sign out submit form submit
.login redirect to homepage, logout redirect to home page

-What if I perform a failed logging attempt?

-----------------------------

17. adding flash messages

.when user perform a fail login
.redirect them to homepage with flash messages

.package connect-flash
.leverage the package in app.js
.controller user login in userController.js

.if we perform a redirect, that's going to be considered a new separate request. Since we redirect to the homepage, our router is going to call our home function at the bottom.

.how can we render the home-guest template so that it includes a little red warning box that says invalid username and pass? leverage session to know if login fail

.flash package will help us to add and remove data from our session and save it to our database.

...at this point, both failed login attempts and successful login attempts are handled smoothly.

.we can use session and flash messages to improve our user registration experience.
-----------------------------

18. user registration improvement

18.1
-if there are validation errors with registration form data when they submit the form, show those validation errors in small red rectangles right above the registration form.

.userController -> register function --> home function --> home-guest.ejs to leverage the regErrors array of message

- Big picture: we want validation on both sides, the server side for security reasons and the browser side for user experience.
  .in the future we can perform live, on the fly validation and show the error messages directly on top of the related field for that message.
  .It's good to have a traditional server side validation setup.
  .Because we can never actually rely or trust browser side validation because an end user can disable browser site JS.

18.2

.add the validation rules that make sure that your username and email have not already taken and enforce it.
.username and email are unique

.Model/User.js to enforce our rules.

-----01/27/2023
18.3: adjust the validate, register function to return a Promise

- when we working with database, it is a asynchronous actions, so we need to be careful to make sure that it actually completes before JavaScript will move on.

- goals: right before we check to see if there are errors or not, we better first complete running all of our validation checks, including those asynchronous calls to the database to check for the uniqueness of username and email.

--->User.js -adjust our validate function to return a promise and then we can await that promise down here in the register function.

- User.prototype.validate = function() {
  return new Promise(async (resolve, reject) = > {... resolve()})
}
- go leverage this validate in our register function because this validate function is going to return a promise, we can add await when calling it.

- we have to adjust register to async function to await the validate promise function.

- register is now an async function, we need to pay attention to where and how we are calling it.

- when our userController.js call our register async function, so we need to make sure that we give it a chance to actually complete before the next operation would begin.

---> it means we need to adjust our Register function so that it returns a Promise and then we can await the Register Promise with await or then.catch if we calling Register function in our controller.

User.prototype.register = function() {
  return new Promise(async (resolve, reject) = > {... resolve()})

- to complete Register Promise we need to call either resolve or reject at the right time.

01/28/23:
- reviews fullstack apps
  -user registration and user generated post with MVC
  -User authentication with session or tokens
  -how to control database, create server, CRUD
  -call back, promise, async/await

- Understanding
- practice 7 steps coding, 5 approaches
-----------------------------
01/30/2023
19. adding user profile photos
- how to pull in a relevant image from gravatar service based on the current logged in users email address
- then , we change topics from user accounts and sessions and move on to letting users actually create posts.

.Gravatar service
.gravatar.com/avatar/hashtagvalue?s=128
.we want to focus on hashtagvalue which is a user's email address, but hash the email address using the md5 library
.we can show this photo publicly on web application without knowing email address
---
.we create a new function getAvatar within User.js
.add a new property avatar onto our main User object and set it to a template literal.

User.prototype.getAvatar = function () {
  this.avatar = `https://gravatar.com/avatar/email?s=128`
}

.replace the word email with the current user's email address hash value using md5 library.
.call this getAvatar function at the appropriate time
.call it once a user has successfully logged in or register.
.Then we leverage the new property avatar after calling getAvatar in User Controller after login, and register using session.
.Next, how can we access that piece of session data from within our home dashboard html template?

.we need to pass this avatar data using home function because we redirect it based on session:

exports.home = function (req, res) {

  if (req.session.user) {
      res.render("home-dashboard", { username: req.session.user.username });
    } else {
      res.render("home-guest", { errors: req.flash("errors"), regErrors: req.flash("regErrors") });
    }
  };

.Finally we using <%= avatar %> to do something dynamic in home-dashboard.ejs
---
.we call it after the database action because we don't want to store the avatar in the database permanently.
.In the future, the gravatar may change the url structure an at that point, we would have to go through every user account in our database and update their avatar database field.
.It makes more sense to just generate on the fly when we need it because the hashing operation is quick and cheap.
.So we just store this in memory on the user object.

----Conclusion:
- We have set up the basic functionality of registering and logging in and out.
- Now we move on to the first real feature of our app, which is letting users create posts or articles.














